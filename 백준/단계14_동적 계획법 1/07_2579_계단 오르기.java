import java.util.Scanner;

public class Main {

	public static void main(String[] args) {
		// 2018-08-18-토

		// 7 2579 계단 오르기

		// 문제
		// 각 계단에 쓰여 있는 점수가 주어질 때 이 게임에서 얻을 수 있는 총 점수의 최대값을 구하는 프로그램을 작성하시오.

		// 규칙
		// 1. 계단은 한 번에 한 계단씩 또는 두 계단씩 오를 수 있다.
		// 즉, 한 계단을 밟으면서 이어서 다음 계단이나, 다음 다음 계단으로 오를 수 있다.
		// 2. 연속된 세 개의 계단을 모두 밟아서는 안 된다. 단, 시작점은 계단에 포함되지 않는다.
		// 3. 마지막 도착 계단은 반드시 밟아야 한다.

		// 입력
		// 입력의 첫째 줄에 계단의 개수가 주어진다.

		// 둘째 줄부터 한 줄에 하나씩 제일 아래에 놓인 계단부터 순서대로 각 계단에 쓰여 있는 점수가 주어진다.
		// 계단의 개수는 300이하의 자연수이고, 계단에 쓰여 있는 점수는 10,000이하의 자연수이다.

		// 출력
		// 첫째 줄에 계단 오르기 게임에서 얻을 수 있는 총 점수의 최대값을 출력한다.

		// 대략적인 생각.
		// 1. '연속된 세 개의 계단을 모두 밟아서는 안 된다'는 조건이 없었을 경우, => 그냥 다 밟으면 되는구나...

		// 2. '연속된 세 개의 계단을 모두 밟아서는 안 된다'는 조건이 포함될 경우,
		// 1번째 계단까지의 최댓값은 1번째 계단의 점수.
		// 2번째 계단까지의 최댓값은 1번째 계단+2번째 계단의 점수.
		// 3번째 계단까지의 최댓값은 (1번째 계단과 2번째 계단의 점수 중 더 큰 계단의 점수) + 3번째 계단의 점수.
		// 여기서 2번째 계단의 점수는 1+2의 점수가 아닌 2번째 계단의 점수만을 의미한다.

		// 4번째 계단까지의 최댓값은 (2번째 계단과 3번째 계단의 점수 중 더 큰 계단의 점수) + 4번째 계단의 점수.
		// ...
		// i번째 계단까지의 최댓값은 (i-2번째 계단과 i-1번째 계단의 점수 중 더 큰 계단의 점수) + i번째 계단의 점수.
		// ...
		// n번째 계단까지의 최댓값은 (n-2번째 계단과 n-1번째 계단의 점수 중 더 큰 계단의 점수) + n번째 계단의 점수.

		Scanner sc = new Scanner(System.in);
		int N;
		int[] stairs; // 계단
		int[][] sum; // 합
		int i;
		int Max;

		// init
		N = sc.nextInt();
		stairs = new int[N];
		sum = new int[N][2];

		for (i = 0; i < N; i++) {
			stairs[i] = sc.nextInt();
		}

		// solve
		sum[0][0] = stairs[0];
		if (N > 2) {
			sum[1][0] = stairs[0] + stairs[1];
			sum[1][1] = stairs[1];
		}

		for (i = 2; i < N; i++) {
			Max = Math.max(sum[i - 2][0], sum[i - 2][1]);
			if (i % 2 == 0) {
				sum[i][0] = Max + stairs[i];
				sum[i][1] = sum[i - 1][1] + stairs[i];
			} else {
				sum[i][0] = sum[i - 1][0] + stairs[i];
				sum[i][1] = Max + stairs[i];
			}
		}

		// 최대값 출력
		Max = Math.max(sum[N - 1][0], sum[N - 1][1]);
		System.out.println(Max);

		sc.close();
	}
}